>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]

>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
TypeError: div must be a number


>>> print(matrix_divided(None, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> print(matrix_divided(5, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> print(matrix_divided([1, 2], 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> print(matrix_divided(5, float('nan')))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> print(matrix_divided(matrix, float('nan')))
[[nan, nan, nan], [nan, nan, nan]]


>>> print(matrix_divided(5, float('inf')))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> print(matrix_divided(matrix, float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]


>>> print(matrix_divided([1, 'x', 5], 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> print(matrix_divided([[3, 9], [12, 15, 3]] , 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size


>>> print(matrix_divided([[3, "9"], [15, 3]] , 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
